using System;
using System.Collections.Generic;

namespace ParkingManagementSystem
{
    // Enum to represent different departments
    public enum Department
    {
        CIT,
        CEAFA,
        CICS
    }

    // Class representing a parking slot
    class ParkingSlot
    {
        public int SlotNumber { get; set; }
        public string VehicleNumber { get; set; } = ""; // Initialize to empty string
        public Department Department { get; set; } // Department of the vehicle
        public bool IsOccupied { get; set; }
        public DateTime EntryTime { get; set; }
        public DateTime ExitTime { get; set; }

        // Constructor
        public ParkingSlot(int slotNumber, Department department)
        {
            SlotNumber = slotNumber;
            Department = department;
            IsOccupied = false;
        }
    }

    // Class representing the Parking Lot
    class ParkingLot
    {
        private List<ParkingSlot> slots;
        private List<string> parkingLog;
        private double carParkingRatePerHour = 30; // Parking rate per hour for cars
        private double motorcycleParkingRatePerHour = 15; // Parking rate per hour for motorcycles
        private double parkingRatePerHour; // Current parking rate per hour

        // Constructor
        public ParkingLot(int capacity)
        {
            slots = new List<ParkingSlot>();
            parkingLog = new List<string>();
            for (int i = 1; i <= capacity; i++)
            {
                slots.Add(new ParkingSlot(i, Department.CIT)); // Initialize slots with default department CIT
            }
        }

        // Method to park a vehicle
        // Method to park a vehicle
public bool ParkVehicle(string driverName, string vehicleNumber, string vehicleType, bool isPWD, Department department)
{
    foreach (var slot in slots)
    {
        if (!slot.IsOccupied && slot.Department == department)
        {
            slot.IsOccupied = true;
            slot.VehicleNumber = vehicleNumber;
            slot.EntryTime = DateTime.Now;
            string pwdStatus = isPWD ? "Yes" : "No";
            string logEntry = $"Vehicle {vehicleNumber} (Driver: {driverName}, License: {vehicleNumber}, Type: {vehicleType}, PWD: {pwdStatus}) parked at slot {slot.SlotNumber} (Department: {department}) at {slot.EntryTime}.";
            parkingLog.Add(logEntry);
            Console.WriteLine(logEntry);
            Console.WriteLine("Your car has been parked");

            // Determine parking rate based on vehicle type
            if (vehicleType.ToLower() == "car" || vehicleType.ToLower() == "motor")
            {
                parkingRatePerHour = vehicleType.ToLower() == "car" ? carParkingRatePerHour : motorcycleParkingRatePerHour;
                Console.WriteLine($"Parking fee: {parkingRatePerHour} PHP per hour");
                return true;
            }
            else
            {
                Console.WriteLine("Invalid vehicle type. Please enter 'car' or 'motor'.");
                return false;
            }
        }
    }
    Console.WriteLine($"No available slots for {department} department.");
    return false;
}


        // Method to leave the parking
        public bool LeaveParking(string vehicleNumber)
        {
            foreach (var slot in slots)
            {
                if (slot.IsOccupied && slot.VehicleNumber == vehicleNumber)
                {
                    slot.IsOccupied = false;
                    slot.VehicleNumber = ""; // Assign empty string
                    slot.ExitTime = DateTime.Now;
                    TimeSpan duration = slot.ExitTime - slot.EntryTime;
                    double totalHours = duration.TotalHours;

                    // Determine parking rate based on vehicle type
                    parkingRatePerHour = vehicleNumber.ToLower().Contains("car") ? carParkingRatePerHour : motorcycleParkingRatePerHour;
                    double totalCost = totalHours < 1 ? parkingRatePerHour : totalHours * parkingRatePerHour;
                    string logEntry = $"Vehicle {vehicleNumber} left the parking at {slot.ExitTime}. Duration: {duration}. Total Cost: {totalCost} PHP";
                    parkingLog.Add(logEntry);
                    Console.WriteLine(logEntry);
                    Console.WriteLine("Drive safely");
                    return true;
                }
            }
            Console.WriteLine($"Vehicle {vehicleNumber} not found in the parking lot");
            return false;
        }

        // Method to display parking status
        public void DisplayParkingStatus()
        {
            Console.WriteLine("Parking Status:");
            Console.WriteLine("+-------------+-----------+----------------+----------------+-----------------+");
            Console.WriteLine("| Slot Number |  Status   | Vehicle Number | Vehicle Type   | Department      |");
            Console.WriteLine("+-------------+-----------+----------------+----------------+-----------------+");
            foreach (var slot in slots)
            {
                string status = slot.IsOccupied ? "Occupied" : "Empty";
                string vehicleNumber = slot.IsOccupied ? slot.VehicleNumber : "-";
                string vehicleType = slot.IsOccupied ? "Car" : "-";
                string department = slot.IsOccupied ? slot.Department.ToString() : ""; // Display blank if slot is empty
                string pwdStatus = slot.IsOccupied ? "Yes" : ""; // Display blank if slot is empty
                Console.WriteLine($"| {slot.SlotNumber,-11} | {status,-9} | {vehicleNumber,-14} | {vehicleType,-14} | {department,-15} |");
            }
            Console.WriteLine("+-------------+-----------+----------------+----------------+-----------------+");
        }

        // Method to display parking log
        public void DisplayParkingLog()
        {
            Console.WriteLine("Parking Log:");
            foreach (var logEntry in parkingLog)
            {
                Console.WriteLine(logEntry);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Create a parking lot with 10 slots
            ParkingLot parkingLot = new ParkingLot(10);

            do
            {
                Console.WriteLine("-----Welcome to Parksense-----");
                Console.WriteLine("Would you like to park your car?,   press 1");
                Console.WriteLine("Do you want to take your car?,      press 2");
                Console.WriteLine("Display the parking area,           press 3");
                Console.WriteLine("Display the logs,                   press 4\n");
                Console.Write("What do you want to do: ");
                int dec = int.Parse(Console.ReadLine());
                Console.WriteLine(" ");
                switch (dec)
                {
                    case 1:
                        Console.Write("Enter driver's name: ");
                        string driverName = Console.ReadLine();
                        Console.Write("Enter your car's license number: ");
                        string licenseNumber = Console.ReadLine();
                        Console.Write("Enter vehicle type (car/motor): ");
                        string vehicleType = Console.ReadLine();
                        Console.Write("Are you a PWD? (yes/no): ");
                        bool isPWD = Console.ReadLine().ToLower() == "yes";
                        Console.WriteLine("Enter your department (CIT, CEAFA, CICS): ");
                        Department department;
                        while (!Enum.TryParse(Console.ReadLine().Trim().ToUpper(), out department))
                        {
                            Console.WriteLine("Invalid department. Please enter again.");
                            Console.WriteLine("Enter your department (CIT, CEAFA, CICS): ");
                        }
                        parkingLot.ParkVehicle(driverName, licenseNumber, vehicleType, isPWD, department);
                        Console.WriteLine("++++++++++++++++++++++++++++\n");
                        break;
                    case 2:
                        Console.Write("Input your car's license number: ");
                        string car = Console.ReadLine();
                        parkingLot.LeaveParking(car);
                        Console.WriteLine("++++++++++++++++++++++++++++\n");
                        break;
                    case 3:
                        parkingLot.DisplayParkingStatus();
                        break;
                    case 4:
                        parkingLot.DisplayParkingLog();
                        Console.WriteLine("++++++++++++++++++++++++++++\n");
                        break;
                    default:
                        Console.WriteLine("Invalid input, please try again");
                        Console.WriteLine("++++++++++++++++++++++++++++\n");
                        break;
                }

            } while (true);

        }
    }
}
